//        // RATE LIMIT EXCEEDED :(((
//        final HashSet<String> unpulledAccountIds = new HashSet<>();
//        unpulledAccountIds.add(summoner.getAccountId());
//        final HashSet<String> pulledAccountIds = new HashSet<>();
//
//        final HashSet<Long> unpulledMatchIds = new HashSet<>();
//        final HashSet<Long> pulledMatchIds = new HashSet<>();
//
//        while(!unpulledAccountIds.isEmpty()) {
//            // Get a new summoner from our list of unpulled summoners and pull their match history
//            final String newAccountId = unpulledAccountIds.iterator().next();
//            final Summoner newSummoner = Summoner.withId(newAccountId).withRegion(region).get();
//            final MatchHistory matches = filterMatchHistory(newSummoner);
//            for(final Match match : matches) {
//                if(!pulledMatchIds.contains(match.getId())) {
//                    unpulledMatchIds.add(match.getId());
//                }
//            }
//            unpulledAccountIds.remove(newAccountId);
//            pulledAccountIds.add(newAccountId);
//
//            while(!unpulledMatchIds.isEmpty()) {
//                // Get a random match from our list of matches
//                final long newMatchId = unpulledMatchIds.iterator().next();
//                final Match newMatch = Match.withId(newMatchId).withRegion(region).get();
//                for(final Participant p : newMatch.getParticipants()) {
//                    if(!pulledAccountIds.contains(p.getSummoner().getAccountId()) && !unpulledAccountIds.contains(p.getSummoner().getAccountId())) {
//                        unpulledAccountIds.add(p.getSummoner().getId());
//                    }
//                }
//                // The above lines will trigger the match to load its data by iterating over all the participants.
//                // If you have a database in your datapipeline, the match will automatically be stored in it.
//                unpulledMatchIds.remove(newMatchId);
//                pulledMatchIds.add(newMatchId);
//            }
//        }

//        // Utols√≥ meccs
//        System.out.println("\n");
//
//        final Match match = matchHistory.get(0);
//        System.out.println("Match ID: " + match.getId());
//
//        final Participant participant = match.getParticipants().find(summoner);
//        System.out.println("\nSince the match was created from a matchref, we only know one participant:");
//        System.out.println(participant.getSummoner().getName() + " played " + participant.getChampion().getName());
//
//        System.out.println("\nNow pull the full match data by iterating over all the participants:");
//        for(final Participant p : match.getParticipants()) {
//            System.out.println(p.getSummoner().getName() + " played " + p.getChampion().getName());
//        }
//
//        System.out.println("\nIterate over all the participants again and note that the data is not repulled:");
//        for(final Participant p : match.getParticipants()) {
//            System.out.println(p.getSummoner().getName() + " played " + p.getChampion().getName());
//        }
//
//        System.out.println("\nBlue team won? " + match.getBlueTeam().isWinner());
//        System.out.println("Red team won? " + match.getRedTeam().isWinner());
//        System.out.println("Participants on blue team:");
//        for(final Participant p : match.getBlueTeam().getParticipants()) {
//            System.out.println(p.getSummoner().getName());
//        }